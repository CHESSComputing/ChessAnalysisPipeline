# General Pipeline-wide parameters.
config:
  # Optional (defaults to the current working directory in which the
  # `CHAP` command is executed). "Root" directory used if `inputdir`
  # or `outputdir` is a relative path.
  root: /path/to/analysis/area

  # Optional (defaults to the value for `root` above). Relative or
  # absolute path to a directory containing files used as input
  # parameters to any PipelineItems used in the `pipeline` section
  # below.
  inputdir: input

  # Optional (defaults to the value for `root` above). Relative or
  # absolute path to a directory to which all output files should be
  # written.
  outputdir: output

  # Optional (defaults to `INFO`). Logging level for the pipeline; may
  # be the name (case insensitive) of any of the python logger logging
  # levels -- `debug`, `info`, `warning`, `error`, or `critical`.
  log_level: debug

  # Optional (defaults to `false`). Boolean indicating whether or not
  # user interaction points will be presented (usually pop-up
  # matplotlib figures used to select data masks, etc.).
  interactive: false

  # Optional (defaults to `false`). Boolean indicating whether or not
  # to profile and print a report on the code executed by the
  # pipeline.
  profile: false

# The specific EDD Pipeline to execute.

#### Calibrate detector channel energies ####
energy_calibration:

  - common.SpecReader:
      # Spec reader for the energy calibration scan.
      config:
        # Name of the station at which the data were collected.
        # Currently, allowed values are: `id1a3`, `id3a`, and `id3b`
        # (case insensitive).
        station: id3a

        # Do not change this value.
        experiment_type: EDD

        # Energy calibration scan(s): a list of spec scans.
        spec_scans:
          -
            # Spec file containing the energy calibration scan -- may
            # be relative to `inputdir` or may be an absolute path.
            spec_file: samplename/spec.log

            # Integer number of the energy calibration scan within
            # `spec_file`.
            scan_numbers: 1

  - edd.MCAEnergyCalibrationProcessor:
      # Energy calibration input parameters.
      config:
        # Optional. Scan step indices to use for the calibration. If
        # not specified, the calibration will be performed on the
        # average of all MCA spectra for the scan(s).
        scan_step_indices: null

        # List of theoretical locations of peaks in keV to use for
        # calibrating the MCA channel energies. It is _strongly_
        # recommended to use fluorescence peaks for the energy
        # calibration.
        peak_energies: [34.276, 34.717, 39.255, 40.231]

        # Index of the peak in `peak_energies` with the highest
        # amplitude.
        max_peak_index: 1

        # Optional. Can be selected during prcessing if
        # `config.interactive` is `true`.  Explicit ranges of
        # uncalibrated MCA channel index ranges to include during
        # energy calibration when the given peaks are fitted to the
        # provied MCA spectrum. Use this parameter or leave it out and
        # select it interactively instead by running a pipeline with
        # `config.interactive: true`.
        fit_index_ranges: [[650, 850]]

        # List of calibration parameters for each detector element to
        # calibrate.
        detectors:
          -
            # ID of the detector element. For 23 element data
            # collected in .h5 format, this should be the integer
            # index of the element of interest. For detector data
            # collected in spec.mca format, this is usually "mca1".
            id: 0

            # Optional (defaults to `90`). Detector rotation about lab
            # frame x axis.
            tth_max: 90

            # Optional (defaults to `0.15`). Minimum resolvable
            # difference in 2&theta between two unique HKL peaks.
            hkl_tth_tol: 0.15

            # Optional (defaults to `[0, 0, 1]`). List of
            # second-degree pylynomial coefficients for transforming
            # detector channel index -> calibrated energy in
            # keV. Order of list is highest-degree coefficient fist,
            # 0th degree coefficient last. If the value of this
            # parameter is [a, b, c], the energy in keV of the ith
            # channel on this detector can be expressed as:
            # E_i = a*i^2 + b*i + c.
            energy_calibration_coeffs: [0, 0, 1]

            # Optional. Name or list of names of the model(s) to use as
            # this detector spectrum's background.
            background: constant

            # Optional (defaults to `false`). Boolean parameter
            # specifying whether automated baseline construction
            # and subtraction is applied to this detector spectrum.
            baseline: true

            # Optional (not used during energy calibration, defaults to
            # 5.0). Initial guess for 2&theta in degrees for this
            # detector.
            tth_initial_guess: 5.6

      # Optional (defaults to `200.0`). Maximum channel energy of the
      # MCA in keV
      max_energy_kev: 200.0

      # Optional. Name or list of names of the model(s) to use as
      # the spectrum's background for _all_ detectors.
      background: constant

      # Optional (defaults to `false`). Boolean parameter
      # specifying whether automated baseline construction
      # and subtraction is applied to _all_ detector spectra.
      baseline: true

      # Optional (defaults to `false`). Boolean indicating whether
      # or not to save .pngs of matplotlib figures showing the
      # calibration fit inputs and results.
      save_figures: true

  - common.YAMLWriter:
      # Name of a file in which to save the energy calibration inputs
      # & results (will be written relative to `outputdir`).
      filename: energy_calibration_result.yaml

      # Optional (defaults to `false`). If the file indicated by the
      # pipeline's `outputdir` and this Writer's `filename` exists,
      # force an overwrite of the existing file.
      force_overwrite: false

##### Calibrate detector 2&theta angles #####
tth_calibration:

  - pipeline.MultiplePipelineItem:
      items:
        - common.SpecReader:
            # Spec reader for the energy calibration scan.
            config:
              # Name of the station at which the data were
              # collected. Currently, allowed values are: `id1a3`,
              # `id3a`, and `id3b` (case insensitive).
              station: id3a

              # MUST be `EDD`. Do not change this value.
              experiment_type: EDD

              # Energy calibration scan(s): a list of spec scans.
              spec_scans:
                -
                  # Spec file containing the energy calibration scan
                  # -- may be # relative to `inputdir` or may be an
                  # absolute path.
                  spec_file: samplename/spec.log

                  # Integer number of the energy calibration scan
                  # within `spec_file`.
                  scan_numbers: 1

        - common.YAMLReader:
            # Name of a file in which the energy calibration inputs &
            # results were written.
            filename: output/energy_calibration_result.yaml

            # Do not change this value:
            schema: edd.models.MCATthCalibrationConfig

  - edd.MCATthCalibrationProcessor:
      # Optional (defaults to using the configuration provided with
      # common.YAMLReader). Ceria calibration input parameters.
      config:
        # Optional. Scan step indices to use for the calibration. If
        # not specified, the calibration will be performed on the
        # average of all MCA spectra for the scan.
        scan_step_indices: null

        # Optional. List of calibration parameters for each detector
        # element to calibrate. Can be omitted to use the ones used in
        # the energy calibration.
        detectors:
          -
            # ID of the detector element. For 23 element data
            # collected in .h5 format, this should be the integer
            # index of the element of interest. For detector data
            # collected in spec.mca format, this is usually "mca1".
            id: 0

            # Optional (defaults to `90`). Detector rotation about lab
            # frame x axis.
            tth_max: 90

            # Optional (defaults to `0.15`). Minimum resolvable
            # difference in 2&theta between two unique HKL peaks.
            hkl_tth_tol: 0.15

            # Optional (defaults to `[0, 0, 1]`). List of
            # second-degree pylynomial coefficients for transforming
            # detector channel index -> calibrated energy in
            # keV. Order of list is highest-degree coefficient fist,
            # 0th degree coefficient last. If the value of this
            # parameter is [a, b, c], the energy in keV of the ith
            # channel on this detector can be expressed as:
            # E_i = a*i^2 + b*i + c.
            energy_calibration_coeffs: [0, 0, 1]

            # Optional. Name or list of names of the model(s) to use as
            # this detector spectrum's background.
            background: linear

            # Optional (defaults to `false`). Boolean parameter
            # specifying whether automated baseline construction
            # and subtraction is applied to this detector spectrum.
            baseline: true

            # Optional (defaults to 5.0). Initial guess for 2&theta in
            # degrees for this detector.
            tth_initial_guess: 5.6

      # Optional. Initial guess for 2&theta in degrees for _all_
      # detectors # (supercedes the value for each detector in
      # `output/energy_calibration_result.yaml`). Can be modified for
      # each individual detector when `config.interactive` is `true`.
      tth_initial_guess: null

      # Optional (defaults to each detector's value present present in
      # `output/energy_calibration_result.yaml`). List of energy ranges
      # to include in the tth calibration fit. Can be modified for
      # each individual detector when `config.interactive` is `true`.
      include_energy_ranges: null

      # Optional (defaults to `false`). If `false`, use a linear model
      # for the detector channel index to energy conversion. If `true`,
      # add a quadratic term to the conversion model.
      quadratic_energy_calibration: false

      # Optional. Name or list of names of the model(s) to use as
      # the spectrum's background for _all_ detectors.
      background: linear

      # Optional (defaults to `false`). Boolean parameter
      # specifying whether automated baseline construction
      # and subtraction is applied to _all_ detector spectra.
      baseline: true

      # Optional. Minimum FWHM for peak fitting in channels (for _all_
      # detectors).
      fwhm_min: 3

      # Optional. Maximum FWHM for peak fitting in channels (for _all_
      # detectors).
      fwhm_max: 25

      # Optional (defaults to `false`). Boolean indicating whether
      # or not to save .pngs of matplotlib figures showing the
      # calibration fit inputs and results.
      save_figures: true

  - common.YAMLWriter:
      # Name of a file in which to save the 2&theta calibration inputs
      # & results (will be written relative to `outputdir`).
      filename: tth_calibration_result.yaml

      # Optional (defaults to `false`). If the file indicated by the
      # pipeline's `outputdir` and this Writer's `filename` exists,
      # force an overwrite of the existing file.
      force_overwrite: false

##### Get the map configuration for the strain analysis #####
strain_map:

  - edd.EddMapReader:
      # Name of the EDD-style .par file containing the dataset.
      parfile: samplename/sample.par

      # Number of the dataset in the .par file to return as a map
      # (defaults to `1`).
      dataset_id: 1

      # Do not change this value:
      schema: common.models.map.MapConfig

  - common.YAMLWriter:
      # Name of a file in which to save the map configuration (will be
      # written relative to `outputdir`).
      filename: map_config.yaml

      # Optional (defaults to `false`). If the file indicated by the
      # pipeline's `outputdir` and this Writer's `filename` exists,
      # force an overwrite of the existing file.
      force_overwrite: false

      # Do not change this value:
      schema: common.models.map.MapConfig

  - common.MapProcessor:
      # List of calibration parameters for each detector element to
      # include in the map.
      detectors:
        -
          # ID of the detector element. For 23 element data
          # collected in .h5 format, this should be the integer
          # index of the element of interest. For detector data
          # collected in spec.mca format, this is usually "mca1".
          id: 0

          # Optional. Any additional detector attributes.
          attrs:
            name: 0
            eta: 180.0

  - common.NexusWriter:
      # Name of a file in which to save the raw data map (will be
      # written relative to `outputdir`).
      filename: raw_data.nxs

      # Optional (defaults to `false`). If the file indicated by the
      # pipeline's `outputdir` and this Writer's `filename` exists,
      # force an overwrite of the existing file.
      force_overwrite: false

##### Perform the strain analysis on the map #####
strain_analysis:

  - pipeline.MultiplePipelineItem:
      items:
        - common.NexusReader:
            # Name of a file in which the raw data map results were
            # written.
            filename: output/raw_data.nxs

        - common.YAMLReader:
            # Name of a file in which the 2&theta calibration inputs &
            # results were written.
            filename: output/tth_calibration_result.yaml

            # Do not change this value:
            schema: edd.models.MCATthCalibrationConfig

  - edd.StrainAnalysisProcessor:
      # Strain analysis input parameters.
      config:

        # List of calibration parameters for each detector element to
        # include in the strain analysis.
        detectors:
          -
            # ID of the detector element. For 23 element data
            # collected in .h5 format, this should be the integer
            # index of the element of interest. For detector data
            # collected in spec.mca format, this is usually "mca1".
            id: 0

            # Optional (defaults to `90`). Detector rotation about lab
            # frame x axis.
            tth_max: 90

            # Optional (defaults to `0.15`). Minimum resolvable
            # difference in 2&theta between two unique HKL peaks.
            hkl_tth_tol: 0.15

            # Optional (e.g. `constant` or `linear`). Name or list of
            # names of the model(s) to use as this detector spectrum's
            # background.
            background: linear

            # Optional (defaults to `false`). Boolean parameter
            # specifying whether automated baseline construction
            # and subtraction is applied to this detector spectrum.
            baseline: true

            # Optional (defaults to `gaussian`). Peak model for peak
            # fitting. May be a string or a list of strings with the
            # allowed values being `gaussian` or `lorentzian`. If a
            # string is provided, all HKL peaks will be fit using the
            # same peak shape. If a list is provided, there must be
            # the same number of items in the list as `hkl_indices`,
            # and each HKL peak will be fit with the corresponding
            # peak shape in the list.
            peak_models: gaussian

            # Optional (defaults to `0.25`). Minimum FWHM for peak
            # fitting in keV.
            fwhm_min: 0.25

            # Optional (defaults to `2.0`). Maximum FWHM for peak
            # fitting in keV.
            fwhm_max: 2.0

            # Optional (defaults to `2.0`). Peak centers range for peak
            # fitting. The allowed range for the peak centers will be
            # the initial values &pm; `centers_range`.
            centers_range: 2.0

            # Optional (defaults to `null`). Relative peak amplitude
            # cutoff for peak fitting (any peak with an amplitude
            # smaller than `rel_amplitude_cutoff` times the sum of all
            # peak amplitudes gets removed from the fit model). This
            # value must be greater than `0` and less than `1`.
            rel_height_cutoff: 0.05

            # Optional (defaults to `[[50,150]]`). May be adjust
            # interactively if `config.interactive` is `true`. List of
            # energy ranges to include in the strain analysis fits.
            include_energy_ranges: [[50, 150]]

        # List of materials in the sample.
        materials:
          -
            # Material name -- used only for recording metadata, not
            # used to determine any material properties.
            material_name: Ti64

            # Space group number
            sgnum: 194

            # List of up to six floats corresponding to the lattice
            # parameters of the material [a, b, c, alpha, beta,
            # gamma]. Fewer than six floats is allowed if the symmetry
            # of the space group permits. For cubic materials, just a
            # float may be provided (a).
            lattice_parameters: [2.9217, 4.66027]

        # Optional (defaults to `true`). Whether to sum over certain
        # axis or not. The default for EDD scan types larger than 2 is
        # to sum over the fly axis, but it can specified as a list
        # over arbitrary summation axes overruling the default
        # behavior for non-zero scan types.
        sum_axes: true

      # Optional (default to `true`). Exclude peaks where the average
      # spectrum is below the `rel_height_cutoff` (in the detector
      # configuration) cutoff relative to the maximum value of the
      # average spectrum.
      find_peaks: true

      # Optional (default to `false`). Skip the animation and plotting
      # of the strain analysis fits (can be slow for large data sets).
      skip_animation: true

      # Optional (defaults to `false`). Boolean indicating whether
      # or not to save .pngs of matplotlib figures showing the
      # the strain analysis results.
      save_figures: true

  - common.NexusWriter:
      # Name of a file in which to save the strain analysis results
      # (will be # written relative to `outputdir`).
      filename: strain.nxs

      # Optional (defaults to `false`). If the file indicated by the
      # pipeline's `outputdir` and this Writer's `filename` exists,
      # force an overwrite of the existing file.
      force_overwrite: false
